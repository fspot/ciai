/*************************************************************************
                           Mailbox  -  description
                             -------------------
*************************************************************************/

//---------- Réalisation de la classe Mailbox -------

//---------------------------------------------------------------- INCLUDE

//-------------------------------------------------------- Include système
using namespace std;
#include <iostream>

//------------------------------------------------------ Include personnel
#include "mailbox.h"

//------------------------------------------------------------- Constantes

//----------------------------------------------------------------- PUBLIC

//----------------------------------------------------- Méthodes publiques
template <typename T>
void Mailbox<T>::Push(const T& element, unsigned int priority)
{
    if (priority >= PRIO_MAX) //gestion prio hors bornes: ramener à prio min
    {
#ifdef DEBUG
	std::cout << "[WARNING] Mailbox::Push() - priority higher than PRIO_MAX (set back to " << PRIO_MAX-1<< ")" << std::endl;
#endif
	priority = PRIO_MAX-1;
    }

    //insertion dans la queue correspondante
    writeMutex[priority].lock();
    queues[priority].push(element);
    writeMutex[priority].unlock();
    sem_post(&countSemaphore);
}

template <typename T>
T Mailbox<T>::Pull()
{
    sem_wait(&countSemaphore);	//attendre message disponible
    for (unsigned int i=0 ; true ; i++ )	//parcours des priorités
    {
	if (queues[i].size()>0)				//quand trouvé, renvoi
	{
	    writeMutex[i].lock();
	    T returnedElt = queues[i].front();
	    queues[i].pop();
	    writeMutex[i].unlock();
	    return returnedElt;
	}
    }
}

template <typename T>
int Mailbox<T>::Size()
{
    int returnValue;
    sem_getvalue(&countSemaphore, &returnValue);
    return returnValue;
}



//-------------------------------------------- Constructeurs - destructeur
template <typename T>
Mailbox<T>::Mailbox()
{
    sem_init(&countSemaphore, 0, 0);
}

template <typename T>
Mailbox<T>::~Mailbox()
{
    sem_destroy(&countSemaphore);
}


